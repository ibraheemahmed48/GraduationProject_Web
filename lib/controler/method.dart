import 'package:cloud_firestore/cloud_firestore.dart';import 'package:file_picker/file_picker.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:mime_type/mime_type.dart';import '../help/Colors.dart';import '../help/text_style.dart';import 'Routes.dart';import 'model.dart';class Methods {  static AddAdmin({required email ,required passowrd}) async{    try {      final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(        email: email,        password:passowrd,      );    } on FirebaseAuthException catch (e) {      if (e.code == 'weak-password') {      } else if (e.code == 'email-already-in-use') {      }    } catch (e) {    }  }  static AddNews ({required title , required body ,required image1 ,required auther ,required stage ,required link1})async{    DateTime today = DateTime.now();    String dateStr = "${today.day}-${today.month}-${today.year}-${today.hour}-${today.minute}";    CollectionReference news = FirebaseFirestore.instance.collection("News");    news.doc("News: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "body": body,      "Images":image1,      "Link": link1,      "Stages": stage ,    }).whenComplete(() => {      Stages.flagserrorNEWS1.value = true,    }).onError((error, stackTrace) => {      Stages.flagserrorNEWS1.value=false,    });  }  static AddSchedules({required title ,required image1 ,required auther ,required stage,required type ,fun})async{    DateTime today = DateTime.now();    String dateStr = "${today.day}-${today.month}-${today.year}-${today.hour}-${today.minute}";    CollectionReference news = FirebaseFirestore.instance.collection("Schedules");    news.doc("Schedules: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "type": type,      "Images":image1,      "Stages": stage ,    }).whenComplete(() => {      Stages.flagsSchedules.value = true,    }).onError((error, stackTrace) => {    Stages.flagsSchedules.value=false,    });  }  static bool passflgs = false;  static bool emailflgs = false;  static Signin({required email ,required passowrd}) async {    try {      final credential = await FirebaseAuth.instance.signInWithEmailAndPassword(          email: email,          password: passowrd      );      passflgs = false;      emailflgs = false;    } on  FirebaseAuthException catch (e) {      if (e.code == 'user-not-found') {        Stages.finaltext ="لا يوجد حساب";        passflgs = true;      } else if (e.code == 'wrong-password') {        Stages.finaltext ="الباسورد خطأ";        passflgs = true;      }    }}  static CollectionReference News = FirebaseFirestore.instance.collection("News"); static List<QueryDocumentSnapshot> newsList = [];  static RxBool post =false.obs;  static getNews() async {    newsList = [];    QuerySnapshot query = await News.get().whenComplete(() => {      post.value=true    });    newsList = query.docs;    newsList.forEach((element) {    print("****************");    print(newsList[0].id);    });  }  static upLodeImagesnew({required text}) async {    Stages.urlNewsImage="";    Stages.flagsNews.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlNewsImage =await ref.getDownloadURL().whenComplete(() => {      Stages.flagsNews.value =true      });      Stages.ListOFurlNewsImage.value.add(Stages.urlNewsImage);      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsNews.value =false;      return "null";      // User canceled the picker    }  }  static upLodeImageSchedules({required text}) async {    Stages.urlSchedulesImage="";    Stages.flagsSchedules1.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlSchedulesImage =await ref.getDownloadURL().whenComplete(() => {        Stages.flagsSchedules1.value =true      });      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsSchedules1.value =false;      return "null";      // User canceled the picker    }  }  static void showAlerterror(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(           textDirection: TextDirection.rtl,            'هناك خطأ',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,           textDirection: TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }  static void showAlertDONE(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(            textDirection: TextDirection.rtl,            'تم الارسال',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,            textDirection: TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }}