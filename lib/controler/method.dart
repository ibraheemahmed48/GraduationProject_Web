import 'package:cloud_firestore/cloud_firestore.dart';import 'package:file_picker/file_picker.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:intl/intl.dart';import 'package:mime_type/mime_type.dart';import 'dart:ui' as ui;import '../help/Colors.dart';import '../help/text_style.dart';import 'Routes.dart';import 'model.dart';class Methods {  static String add_stages="";  static String add_student="";  static String deleteStages="";  static String deleteStudent="";  static AddAdmin({required email ,required passowrd,required Username}) async{    try {      final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(        email: email,        password:passowrd,      ).then((value) async => {        print("User name:${Username}"),        await FirebaseAuth.instance.currentUser?.updateDisplayName(Username),        print("User name1:${Username}"),      }).whenComplete(() async => {        Stages.flagsAdduser.value=true,      if (await FirebaseAuth.instance.currentUser != null) {        Stages.alartADDuser="تمت الاضافة بنجاح",        Stages.errorAdduser2.value=true      }else{        Stages.alartADDuser="فشلت العملة",        Stages.errorAdduser2.value=false      }      });    } on FirebaseAuthException catch (e) {      if (e.code == 'weak-password') {        Stages.alartADDuser="الباسورد ضعيف";        Stages.errorAdduser2.value=false;      } else if (e.code == 'email-already-in-use') {        Stages.alartADDuser="الاميل مستخدم";        Stages.errorAdduser2.value=false;      }    } catch (e) {      print("eeeeeeeeeeeeeeee$e");      Stages.alartADDuser="هناك خطأ";      Stages.errorAdduser2.value=false;    }  }  static AddNews ({required title , required body ,required image1 ,required auther ,required stage ,required link1})async{    DateTime today = DateTime.now();    print("${DateFormat.jms().format(DateTime.now())}");    String dateStr = "${today.year}-${today.month}-${today.day}  ${DateFormat.jms().format(DateTime.now())}";    CollectionReference news = FirebaseFirestore.instance.collection("News");    news.doc("News: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "body": body,      "Images":image1,      "Link": link1,      "Stages": stage ,      "dislikes":0,      "favorites":0,      "likes":0,    }).whenComplete(() => {      Stages.flagserrorNEWS1.value = true,      print("*********************************************whenComplete")    }).onError((error, stackTrace) => {      print("*********************************************onError"),      Stages.flagserrorNEWS1.value=false,      print("error:${error}")    });  }  static RxBool AddStudentFlag=false.obs;  static RxBool errorAddStudentFlag=false.obs;  static AddStudent ({required stage ,required email})async{    CollectionReference Student = FirebaseFirestore.instance.collection("Stage:${stage}");    Student.add({      "email":email,      "stage":stage    }).whenComplete(() => {      print("*********************************************whenComplete"),    if (Student.id != null) {        print('Document added successfully with ID: ${Student.id}'),    Methods.AddStudentFlag.value=true,    print("111111111111111${Methods.AddStudentFlag.value}")    } else {      Methods.AddStudentFlag.value=false,      Methods.errorAddStudentFlag.value=true,      print('Error adding document'),    }    });  }  static AddSchedules({required title ,required image1 ,required auther ,required stage,required type ,fun})async{    DateTime today = DateTime.now();    print("${DateFormat.jms().format(DateTime.now())}");    String dateStr = "${today.year}-${today.month}-${today.day}  ${DateFormat.jms().format(DateTime.now())}";    CollectionReference news = FirebaseFirestore.instance.collection("Schedules");    news.doc("Schedules: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "type": type,      "Images":image1,      "Stages": stage ,      "dislikes":0,      "favorites":0,      "likes":0,    }).whenComplete(() => {      Stages.flagsSchedules.value = true,    }).onError((error, stackTrace) => {    Stages.flagsSchedules.value=false,    });  }  static bool passflgs = false;  static bool emailflgs = false;  static Signin({required email ,required passowrd}) async {    try {      final credential = await FirebaseAuth.instance.signInWithEmailAndPassword(          email: email,          password: passowrd      );      passflgs = false;      emailflgs = false;    } on  FirebaseAuthException catch (e) {      if (e.code == 'user-not-found') {        Stages.finaltext ="لا يوجد حساب";        passflgs = true;      } else if (e.code == 'wrong-password') {        Stages.finaltext ="الباسورد خطأ";        passflgs = true;      }    }}  static CollectionReference News = FirebaseFirestore.instance.collection("News"); static RxList newsList = [].obs;  static RxBool post =false.obs;  static getNews() async {    newsList = [].obs;    QuerySnapshot query = await News.get().whenComplete(() => {      post.value=true    });    newsList = query.docs.obs;    newsList.forEach((element) {    print("****************");    print(newsList[0].id);    });  }//////////////////////////////Schedules/////////  static CollectionReference Schedules = FirebaseFirestore.instance.collection("Schedules");  static RxList SchedulessList = [].obs;  static RxBool Schedulespost =false.obs;  static getSchedules() async {    SchedulessList = [].obs;    QuerySnapshot query = await Schedules.get().whenComplete(() => {      Schedulespost.value=true    });    SchedulessList = query.docs.obs;    SchedulessList.forEach((element) {      print("****************");      print(SchedulessList[0].id);    });  }  static upLodeImagesnew({required text}) async {    Stages.urlNewsImage="";    Stages.flagsNews.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlNewsImage =await ref.getDownloadURL().whenComplete(() => {      Stages.flagsNews.value =true      });      Stages.ListOFurlNewsImage.value.add(Stages.urlNewsImage);      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsNews.value =false;      return "null";      // User canceled the picker    }  }  static upLodeImageSchedules({required text}) async {    Stages.urlSchedulesImage="";    Stages.flagsSchedules1.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlSchedulesImage =await ref.getDownloadURL().whenComplete(() => {        Stages.flagsSchedules1.value =true      });      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsSchedules1.value =false;      return "null";      // User canceled the picker    }  }  static void showAlerterror(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(           textDirection: ui.TextDirection.rtl,            'هناك خطأ',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,           textDirection: ui.TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }  static void showAlertDONE(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(            textDirection: ui.TextDirection.rtl,            'تم الارسال',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,            textDirection: ui.TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }}