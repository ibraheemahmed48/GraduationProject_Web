import 'dart:convert';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:file_picker/file_picker.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:intl/intl.dart';import 'package:mime_type/mime_type.dart';import 'dart:ui' as ui;import 'package:http/http.dart' as http;import '../help/Colors.dart';import '../help/text_style.dart';import 'Routes.dart';import 'model.dart';class Methods {  ////////////////////////////  static String EmailSigin="";  static String PasswordSigin="";  static List list_of_UId=[];  static List<String> docIds = [];  ////////////////////////////  static String add_stages="";  static String add_student="";  static String deleteStages="";  static String deleteStudent="";  static AddAdmin({required email ,required passowrd,required Username}) async{    try {      final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(        email: email,        password:passowrd,      ).then((value) async => {        print("User name:${Username}"),        await FirebaseAuth.instance.currentUser?.updateDisplayName(Username),        print("User name1:${Username}"),      }).whenComplete(() async => {        Stages.flagsAdduser.value=true,      if (await FirebaseAuth.instance.currentUser != null) {        Stages.alartADDuser="تمت الاضافة بنجاح",        Stages.errorAdduser2.value=true,        await FirebaseFirestore.instance.collection('Admin').add({          'name': FirebaseAuth.instance.currentUser?.displayName,          'email': email,        })      }else{        Stages.alartADDuser="فشلت العملة",        Stages.errorAdduser2.value=false      }      });    } on FirebaseAuthException catch (e) {      if (e.code == 'weak-password') {        Stages.alartADDuser="الباسورد ضعيف";        Stages.errorAdduser2.value=false;      } else if (e.code == 'email-already-in-use') {        Stages.alartADDuser="الاميل مستخدم";        Stages.errorAdduser2.value=false;      }    } catch (e) {      print("eeeeeeeeeeeeeeee$e");      Stages.alartADDuser="هناك خطأ";      Stages.errorAdduser2.value=false;    }  }  static String appKey="AAAA7h7jZ0s:APA91bH4t6pPKUGbhZ5IdQe3pdQKllBlgFkor6TRvhEHA8vhepME0K9gzsIQv6lGb8-XckA6o1VQf2Ag_87MXULmJDapbomsPZIPEgqg5qF4Si5BLrC9iQMRhd3t7S6jIdNmZ0a2tDoe";  static Future<void> sendNotification({required String? title,required String body1,required String fcmToken,required String time}) async {    final String serverKey = appKey;    final String url = 'https://fcm.googleapis.com/fcm/send';    Map<String, dynamic> notification = {      'title': title,      'body': body1,      'time': time    };    Map<String, dynamic> data = {      'click_action': 'FLUTTER_NOTIFICATION_CLICK',      'id': '1',      'status': 'done',      'time': time    };    Map<String, dynamic> body = {      'notification': notification,      'data': data,      //'to': topic   //   'to': '/topics/$topic',      "to": fcmToken    };    final response = await http.post(      Uri.parse(url),      headers: <String, String>{        'Content-Type': 'application/json',        'Authorization': 'key=$serverKey',      },      body: jsonEncode(body),    );    if (response.statusCode == 200) {      print('Notification sent!');    } else {      print('Notification failed with status: ${response.statusCode}');    }  }////////////////////////////////////////////////////  static Future<void> sendNotificationbytopic({required String? title,required String body1,required String topic,required String time}) async {    final String serverKey = appKey;    final String url = 'https://fcm.googleapis.com/fcm/send';    Map<String, dynamic> notification = {      'title': title,      'body': body1,      'time': time    };    Map<String, dynamic> data = {      'click_action': 'FLUTTER_NOTIFICATION_CLICK',      'id': '1',      'status': 'done',      'time': time    };    Map<String, dynamic> body = {      'notification': notification,      'data': data,      //'to': topic      'to': '/topics/$topic',      //"to": fcmToken    };    final response = await http.post(      Uri.parse(url),      headers: <String, String>{        'Content-Type': 'application/json',        'Authorization': 'key=$serverKey',      },      body: jsonEncode(body),    );    if (response.statusCode == 200) {      print('Notification sent!');    } else {      print('Notification failed with status: ${response.statusCode}');    }  }  Future<List<String>> getAllTokensFromFirestore1({required String collectionName , required String stage}) async {    FirebaseFirestore firestore = FirebaseFirestore.instance;    QuerySnapshot querySnapshot = await firestore.collection(collectionName).where("field",isEqualTo: stage).get();    List<String> tokens = [];    for (var doc in querySnapshot.docs) {      if (doc.exists) {              }    }    return tokens;  }  static RxList tokenList =[].obs; static Future<List<String>?> getAllTokensFromFirestore({required String stage}) async {   print("/////////////getAllTokensFromFirestore//////////////");   try {      QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection('Student').where("stage",isEqualTo: "${stage}").get();      tokenList = querySnapshot.docs.obs;      tokenList.forEach((element) {        print("////////////AllTokens///////////////");        print("${element["name"]}");      });                                       } catch (e) {      print('Error retrieving data from Firestore: $e');    }    return null;  }  static DateTime todaynews = DateTime.now();  static AddNews ({required title , required body ,required image1 ,required auther ,required stage ,required link1})async{    print("${DateFormat.jms().format(DateTime.now())}");    String dateStr = "${todaynews.year}-${todaynews.month}-${todaynews.day}  ${DateFormat.jms().format(DateTime.now())}";     CollectionReference news = FirebaseFirestore.instance.collection("News");    news.doc("News: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "body": body,      "Images":image1,      "Link": link1,      "Stages": stage ,      "dislikes":[],      "favorites":[],      "likes":[],      "time":"${todaynews.year}-${todaynews.month}-${todaynews.day}  ${DateFormat.jms().format(DateTime.now())}",      "realtime":"${todaynews}",    }).whenComplete(() async => {      print("*********************************************whenComplete"),      print("stage${stage}"),    }).onError((error, stackTrace) => {      print("*********************************************onError"),      Stages.flagserrorNEWS1.value=false,      print("error:${error}")    });  }  static RxBool AddStudentFlag=false.obs;  static RxBool errorAddStudentFlag=false.obs;  static AddStudent ({required stage ,required email,required name})async{    CollectionReference Student = FirebaseFirestore.instance.collection("Student");    Student.add({      "email":email,      "stage":stage,      "name": name,      "Token" : ""    }).whenComplete(() => {      print("*********************************************whenComplete"),    if (Student.id != null) {        print('Document added successfully with ID: ${Student.id}'),    Methods.AddStudentFlag.value=true,    print("111111111111111${Methods.AddStudentFlag.value}")    } else {      Methods.AddStudentFlag.value=false,      Methods.errorAddStudentFlag.value=true,      print('Error adding document'),    }    });  }  static DateTime todaySchedules = DateTime.now();  static AddSchedules({required title ,required image1 ,required auther ,required stage,required type ,fun})async{    print("${DateFormat.jms().format(DateTime.now())}");    String dateStr = "${todaySchedules.year}-${todaySchedules.month}-${todaySchedules.day}  ${DateFormat.jms().format(DateTime.now())}";    CollectionReference news = FirebaseFirestore.instance.collection("Schedules");    news.doc("Schedules: ${dateStr.toString()}").set({      "Title": title,      "author":auther,      "type": type,      "Images":image1,      "Stages": stage ,      "dislikes":[],      "favorites":[],      "likes":[],      "time":"${todaySchedules.year}-${todaySchedules.month}-${todaySchedules.day}  ${DateFormat.jms().format(DateTime.now())}",    "realtime":"${todaySchedules}",    }).whenComplete(() => {    }).onError((error, stackTrace) => {    Stages.flagsScheduleserror.value=true,    });  }  static Future<bool> checkEmailExists(String email) async {    final CollectionReference usersCollection = FirebaseFirestore.instance.collection('Admin');    QuerySnapshot snapshot = await usersCollection.where('email', isEqualTo: email).get();    return snapshot.docs.isNotEmpty;  }  static bool passflgs = false;  static bool emailflgs = false;  static RxBool emailExists=false.obs;  static Signin({required email ,required passowrd}) async {    print("------------------------Signin----------------------------------");      try {        print("------------------------try----------------------------------");        final CollectionReference usersCollection = FirebaseFirestore.instance.collection('Admin');        QuerySnapshot snapshot = await usersCollection.where('email', isEqualTo: email).get();        if(snapshot.docs.isNotEmpty){          final credential = await FirebaseAuth.instance.signInWithEmailAndPassword(              email: email,              password: passowrd          ).then((value) => {            passflgs = false,            emailflgs = false          });        }      } on  FirebaseAuthException catch (e) {        if (e.code == 'user-not-found') {          Stages.finaltext ="لا يوجد حساب";          passflgs = true;        } else if (e.code == 'wrong-password') {          Stages.finaltext ="الباسورد خطأ";          passflgs = true;        }        else{          Stages.finaltext ="هناك خظأ";          passflgs = true;        }      }}  static CollectionReference News = FirebaseFirestore.instance.collection("News"); static RxList newsList = [].obs;  static RxBool post =false.obs;  static getNews() async {    print("//////////////////////getNews////////////////////////////");    newsList = [].obs;    QuerySnapshot query = await News.get().whenComplete(() => {      post.value=true    });    newsList = query.docs.obs;    newsList.forEach((element) {    //int fieldLength = query['my_list_field'].length;    });  }//////////////////////////////Schedules/////////  static CollectionReference Schedules = FirebaseFirestore.instance.collection("Schedules");  static RxList SchedulessList = [].obs;  static RxBool Schedulespost =false.obs;  static getSchedules() async {    print("//////////////////////getSchedules////////////////////////////");    SchedulessList = [].obs;    QuerySnapshot query = await Schedules.get().whenComplete(() => {      Schedulespost.value=true    });    SchedulessList = query.docs.obs;    SchedulessList.forEach((element) {    });  }  static CollectionReference contact = FirebaseFirestore.instance.collection("Studentscontact");  static RxList contactList = [].obs;  static RxBool Complete =false.obs;  static getcontact() async {    print("//////////////////////getcontact////////////////////////////");    try{      contactList = [].obs;      QuerySnapshot query = await contact.get().whenComplete(() => {        Complete.value=true      });      contactList = query.docs.obs;      contactList.forEach((element) {      });    }catch(error){      Complete.value=false;    }  }  static upLodeImagesnew({required text}) async {    Stages.urlNewsImage="";    Stages.flagsNews.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlNewsImage =await ref.getDownloadURL().whenComplete(() => {      Stages.flagsNews.value =true      });      Stages.ListOFurlNewsImage.value.add(Stages.urlNewsImage);      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsNews.value =false;      return "null";      // User canceled the picker    }  }  static upLodeImageSchedules({required text}) async {    Stages.urlSchedulesImage="";    Stages.flagsSchedules1.value =false;    final result = await FilePicker.platform.pickFiles(      type: FileType.image,    );    if (result != null) {      var mimeType = mime(result.files.single.name);      final file =await result.files.single.bytes;      Stages.bytesData1 = file;      var ref = FirebaseStorage.instance.ref("${text}Images").child("${DateTime.now().toString()+result.files.single.name}");      await ref.putData(file!,SettableMetadata(contentType: mimeType?.obs.value.toString()));      Stages.urlSchedulesImage =await ref.getDownloadURL().whenComplete(() => {        Stages.flagsSchedules1.value =true      });      Future.delayed(const Duration(microseconds: 500), () async {      });    } else {      Stages.flagsSchedules1.value =false;      return "null";      // User canceled the picker    }  }  static createUserWithEmailAndPassword({required String email , required String password }) async {    try {      final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(        email: email,        password: password,      );      print("UID: ${FirebaseAuth.instance.currentUser?.uid}");      Methods.list_of_UId.add(FirebaseAuth.instance.currentUser?.uid);    }  catch (e) {      print(e);    }  }  static void showAlerterror(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(           textDirection: ui.TextDirection.rtl,            'هناك خطأ',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,           textDirection: ui.TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: const Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }  static void showAlertDONE(BuildContext context ,String text) {    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text(            textDirection: ui.TextDirection.rtl,            'تم الارسال',            style:Text_Style.getstyle(fontsize: 25, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          content: Text(            text,            textDirection: ui.TextDirection.rtl,            style:Text_Style.getstyle(fontsize: 18, ColorText: Colorsapp.mainColor, fontWeight: FontWeight.w700),          ),          actions: <Widget>[            TextButton(              child: const Text('OK'),              onPressed: () {                Navigator.of(context).pop();              },            ),          ],        );      },    );  }}