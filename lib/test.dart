import 'dart:async';import 'dart:convert';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/material.dart';import 'package:file_picker/file_picker.dart';import 'package:http/http.dart';class ImportCsvScreen extends StatefulWidget {  @override  _ImportCsvScreenState createState() => _ImportCsvScreenState();}class _ImportCsvScreenState extends State<ImportCsvScreen> {  PlatformFile? _selectedFile;  List<Map<String, dynamic>> _data = [];  bool _isLoading = false;  Future<void> _selectFile() async {    final result = await FilePicker.platform.pickFiles(      type: FileType.custom,      allowedExtensions: ['csv'],    );    if (result == null) {      return;    }    setState(() {      _selectedFile = result.files.single;      _data = [];    });  }  Future<void> _uploadFile() async {    setState(() {      _isLoading = true;    });    try {      final fileName = _selectedFile?.name;      final ref = FirebaseStorage.instance.ref().child(fileName!);      final task = ref.putData(_selectedFile!.bytes!);      final snapshot = await task.whenComplete(() {});      final url = await snapshot.ref.getDownloadURL();      await _readData(url);      await _writeData();    } catch (e) {      print('Error uploading file: $e');    } finally {      setState(() {        _isLoading = false;      });    }  }  Future<void> _readData(String url) async {    final response = await get(Uri.parse(url));    final lines = LineSplitter().convert(utf8.decode(response.bodyBytes));    final headers = lines[0].split(',');    setState(() {      _data = List.generate(        lines.length - 1,            (i) => Map.fromIterables(          headers,          lines[i + 1].split(','),        ),      );    });  }  Future<void> _writeData() async {    final batch = FirebaseFirestore.instance.batch();    for (final record in _data) {      final docRef = FirebaseFirestore.instance.collection('my_collection').doc();      batch.set(docRef, record);    }    await batch.commit();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('Import CSV'),      ),      body: Center(        child: Column(          mainAxisAlignment: MainAxisAlignment.center,          children: [            if (_selectedFile == null)              Text('Please select a CSV file')            else              Text('Selected file: ${_selectedFile?.name}'),            SizedBox(height: 16),            ElevatedButton(              onPressed: _selectFile,              child: Text('Select file'),            ),            SizedBox(height: 16),            if (_selectedFile != null)              ElevatedButton(                onPressed: _isLoading ? null : _uploadFile,                child: _isLoading ? CircularProgressIndicator() : Text('Upload file'),              ),          ],        ),      ),    );  }}