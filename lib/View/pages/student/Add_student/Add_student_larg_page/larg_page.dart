import 'package:cloud_firestore/cloud_firestore.dart';import 'package:email_validator/email_validator.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:get/get_rx/src/rx_types/rx_types.dart';import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';import 'package:notificationsystem/controler/method.dart';import '../../../../../controler/model.dart';import '../../../../../help/Colors.dart';import '../../../../../help/text_style.dart';import 'Row_Delete_Student_small.dart';import '../Add_student_small_page/Row_of_Button_Delete_student.dart';import 'Button_1.dart';import 'Button_Student.dart';import 'Column_of_Text_field.dart';import 'Row_Delete_Student.dart';import 'Row_of_Button_Add_student.dart';import 'Row_of_Button_Delete_student.dart';import 'TextField_Add_student1.dart';import 'TextField_Delete_student1.dart';class Add_student_larg_page extends StatefulWidget {  const Add_student_larg_page({Key? key}) : super(key: key);  @override  State<Add_student_larg_page> createState() => _Add_student_larg_pageState();}class _Add_student_larg_pageState extends State<Add_student_larg_page> {  @override  bool isValid = false;  Widget build(BuildContext context) {    return Row(      mainAxisAlignment: MediaQuery.of(context).size.longestSide < 1000?MainAxisAlignment.center:MainAxisAlignment.spaceBetween,      children: [        Padding(          padding:  EdgeInsets.only(left: MediaQuery.of(context).size.longestSide > 1000?80:0, top: 50),          child: ScrollConfiguration(behavior: ScrollConfiguration.of(context).copyWith(scrollbars: false),          child: SingleChildScrollView(            child: Column(              children: [                Padding(                  padding: const EdgeInsets.only(top: 20),                  child: Text(                    "أضافة طالب",                    style: Text_Style.getstyle(                        fontsize: MediaQuery.of(context).size.longestSide / 30,                        ColorText: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                        fontWeight: FontWeight.w700),                  ),                ),                if(MediaQuery.of(context).size.longestSide < 1000)                  Obx(                        () {                      return TextField_Add_Student(typed_email: Stages.typed_email,                        Email: Stages.Email_add_student,                        text: 'الايميل:',                        width1: MediaQuery.of(context).size.longestSide > 1000?2.5:1.2,                        icon:Icon((Icons.alternate_email),                            color: Stages.typed_email.value.isEmpty                                ? Colors.black                                :  Colorsapp.mainColor),                        maxline: 1,                        onChanged: (text1) {                          Stages.typed_email.value =text1;                        }, pass: false,                        margin_left: 50,                      );                    }                ),                if(MediaQuery.of(context).size.longestSide < 1000)                  Obx(                        () {                      return TextField_Add_Student(                        typed_email: Stages.typed_name,                        Email: Stages.name_add_student,                        text: 'الاسم:',                        width1: MediaQuery.of(context).size.longestSide > 1000?2.5:1.2,                        icon:Icon((Icons.alternate_email),                            color: Stages.typed_name.value.isEmpty                                ? Colors.black                                :  Colorsapp.mainColor),                        maxline: 1,                        onChanged: (text1) {                          Stages.typed_name.value =text1;                        }, pass: false,                        margin_left: 50,                      );                    }                ),                if(MediaQuery.of(context).size.longestSide > 1000)                  Column_of_Text_field(                    typed_name: Stages.typed_name,                    typed_email: Stages.typed_email,                    typed_passowrd: Stages.typed_passowrd),                if(MediaQuery.of(context).size.longestSide < 1000)                Padding(                  padding: const EdgeInsets.all(8.0),                  child: Text(                    "أختيار المرحلة",                    style: Text_Style.getstyle(                        fontsize:MediaQuery.of(context).size.longestSide > 1000? MediaQuery.of(context).size.longestSide / 60:MediaQuery.of(context).size.longestSide / 40,                        ColorText: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                        fontWeight: FontWeight.w700),                  ),                ),                Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Row_of_Button_Add_student(),                    if(MediaQuery.of(context).size.longestSide > 1000)                    Text(                      ":أختيار المرحلة",                      style: Text_Style.getstyle(                          fontsize:MediaQuery.of(context).size.longestSide > 1000? MediaQuery.of(context).size.longestSide / 60:MediaQuery.of(context).size.longestSide / 50,                          ColorText: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                          fontWeight: FontWeight.w700),                    ),                  ],                ),                Button_1(                  text: 'اضافة',                  onPressed: () {                    isValid = EmailValidator.validate(                      Stages.Email_add_student.text,);                    setState(() async {                      if (Methods.add_student == "") {                        Methods.showAlerterror(context, "لم يتم تحديد مرحلة");                      }else if(isValid == false){                        Methods.showAlerterror(context, "الايميل غير صالح");                      }else{                       await Methods.AddStudent(stage: Methods.add_student, email: Stages.Email_add_student.text, name: Stages.name_add_student.text);                        print(Methods.AddStudentFlag.value);                       Future.delayed(const Duration(seconds: 2), () async {                         if(Methods.AddStudentFlag.value==true){                           Methods.showAlertDONE(context, "تمت الضافة بنجاح");                           Methods.AddStudentFlag.value=false;                           Methods.add_student="";                           await Methods.createUserWithEmailAndPassword(email:  Stages.Email_add_student.text, password: "12345678", name: Stages.name_add_student.text);                         }                         if(Methods.errorAddStudentFlag.value==true){                           Methods.showAlerterror(context, "حدث خطأ في الاضافة");                           Methods.errorAddStudentFlag.value=false;                         }                       });                      }                      print(Methods.add_student);                    });                  }, color: Colorsapp.greenColor,                ),                Padding(                  padding: const EdgeInsets.symmetric(vertical: 20),                  child: Divider(color: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                    width1:MediaQuery.of(context).size.longestSide > 1000?2:1.2 ,                  ),                ),                if(MediaQuery.of(context).size.longestSide < 1000)                  Padding(                    padding: const EdgeInsets.all(8.0),                    child: Text(                      "حذف مرحلة",                      style: Text_Style.getstyle(                          fontsize:MediaQuery.of(context).size.longestSide > 1000? MediaQuery.of(context).size.longestSide / 60:MediaQuery.of(context).size.longestSide / 40,                          ColorText: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                          fontWeight: FontWeight.w700),                    ),                  ),                Row(                  mainAxisAlignment: MainAxisAlignment.start,                  children: [                    button_clicked_Delete_student(),                    if(MediaQuery.of(context).size.longestSide > 1000)                    Text(                      "حذف مرحلة",                      style: Text_Style.getstyle(                          fontsize: MediaQuery.of(context).size.longestSide / 60,                          ColorText: Colorsapp.mainColor,                          fontWeight: FontWeight.w700),                    ),                  ],                ),                Button_1(                  text: 'حذف',                                    onPressed: () async {                    Methods.deleteStudent="";                    if (Methods.deleteStages == "") {                      Methods.showAlerterror(context, "لم يتم تحديد مرحلة");                    }else{                      QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collectionGroup("Stage:${Methods.deleteStages}").get();                      if(querySnapshot.size==0){                        Methods.showAlerterror(context, "لا يوجد طلاب في المرحلة");                      }else{                        querySnapshot.docs.forEach((document) async {                          print("querySnapshot:${querySnapshot}");                          await document.reference.delete().then((value) =>Methods.deleteStages="" ).whenComplete(() =>                          {                            print('Collection deleted successfully'),                          });                        });                        Methods.showAlertDONE(context, "تم حذف المرحلة");                      }                    }                  }, color: Colorsapp.redColor,                ),                Padding(                  padding: const EdgeInsets.symmetric(vertical: 20),                  child: Divider(color: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                    width1:MediaQuery.of(context).size.longestSide > 1000?2:1.2 ,                  ),                ),                if(MediaQuery.of(context).size.longestSide < 1000)                  Padding(                    padding: const EdgeInsets.all(8.0),                    child: Text(                      "حذف طالب",                      style: Text_Style.getstyle(                          fontsize:MediaQuery.of(context).size.longestSide > 1000? MediaQuery.of(context).size.longestSide / 60:MediaQuery.of(context).size.longestSide / 40,                          ColorText: MediaQuery.of(context).size.longestSide > 1000?Colorsapp.mainColor:Colors.white,                          fontWeight: FontWeight.w700),                    ),                  ),                MediaQuery.of(context).size.longestSide > 1000?Padding(                  padding: const EdgeInsets.only(bottom: 0),                  child: Row_Delete_Student(typed_Delete_email: Stages.typed_Delete_email,                    onPressed: () async {                      print("Row_Delete_Student");                      Methods.deleteStages="";                      print(Methods.deleteStudent);                      if (Methods.deleteStudent == "") {                        Methods.showAlerterror(context, "لم يتم تحديد مرحلة");                      }else{                        print(Stages.Email_Delete_student.text,);                        QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection("Stage:${Methods.deleteStudent}").where("email", isEqualTo: Stages.Email_Delete_student.text,).get();                        print(querySnapshot.docs);                        if(querySnapshot.size==0){                          Methods.showAlerterror(context, "لا يوجد هذا الطالب في المرحلة");                        }else{                          print("querySnapshot.docs.forEach((document) async {");                          querySnapshot.docs.forEach((document) async {                            await document.reference.delete();                          });                        }                        print('Documents deleted successfully');                        Methods.showAlertDONE(context, "تم حذف الطالب");                      }                    },),                ):Padding(                  padding: const EdgeInsets.only(bottom: 20),                  child: Row_Delete_Student_small(typed_Delete_email: Stages.typed_Delete_email,                    onPressed: () async {                      print("Row_Delete_Student_small");                      Methods.deleteStages="";                      print(Methods.deleteStudent);                      if (Methods.deleteStudent == "") {                        Methods.showAlerterror(context, "لم يتم تحديد مرحلة");                      }else{                        QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection("Stage:${Methods.deleteStudent}").where("email", isEqualTo: Stages.Email_Delete_student.text,).get();                        print(querySnapshot.docs);                        if(querySnapshot.size==0){                          Methods.showAlerterror(context, "لا يوجد هذا الطالب في المرحلة");                        }else{                          querySnapshot.docs.forEach((document) async {                            await document.reference.delete();                          });                        }                        print('Documents deleted successfully');                        Methods.showAlertDONE(context, "تم حذف الطالب");                      }                  },                  ),                ),                Row(                  mainAxisAlignment: MainAxisAlignment.start,                  children: [                    Padding(                      padding: const EdgeInsets.only(bottom: 20,top: 10),                      child: button_clicked_Delete_student(),                    ),                    if(MediaQuery.of(context).size.longestSide > 1000)                      Text(                        "اختيار مرحلة",                        style: Text_Style.getstyle(                            fontsize: MediaQuery.of(context).size.longestSide / 60,                            ColorText: Colorsapp.mainColor,                            fontWeight: FontWeight.w700),                      ),                  ],                ),              ],            ),          )),        ),        if (MediaQuery.of(context).size.longestSide > 1000)          Column(            children: [              Image.asset(                "photo/1111.png",                width: MediaQuery.of(context).size.longestSide / 2.5,                height: MediaQuery.of(context).size.longestSide / 2.5,              ),              Row(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Text(                    "SWAP",                    style: Text_Style.getstyle(                        fontsize: MediaQuery.of(context).size.height / 20,                        ColorText: Colorsapp.White,                        fontWeight: FontWeight.w500),                  ),                  Icon(                    Icons.arrow_forward,                    color: Colorsapp.White,                    size: 30,                  ),                ],              ),            ],          ),      ],    );  }}class Divider extends StatelessWidget {   Divider({    Key? key, this.color, this.width1,  }) : super(key: key);  final Color? color;  final double? width1;  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.all(8.0),      child: Container(        width: MediaQuery.of(context).size.width / (width1??2),        height: 3,        decoration: BoxDecoration(            color: color??Colorsapp.mainColor,            borderRadius: BorderRadius.all(              Radius.circular(10),            ),            border: Border.all(color: color??Colorsapp.mainColor, width: 2)),      ),    );  }}